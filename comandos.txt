kind create cluster
kind create cluster --name kind-multinodes
kind get clusters
kind detele clusters
kind detele clusters --name kind-multinodes
kind create cluster --name kind-multinodes --config /home/marcelotse/tse/kubernetes/kind-3nodes.yaml

https://highfalutin-vulture-304.notion.site/Instala-o-com-Kubeadm-8ce4f709872342ff848a4df77e53618d

#### Hora de trabalhar com Kubernetes ###
## Kurbenetes nos da escabilidade resiliencia e um facilidade na hora de gerir as aplicacoes ##
# POD, REPLICASET, DEPLOYMENT E SERVICE todos utilizando o conceito de labels e selects #
POD menor objeto nos cluster kubernetes no pode que executa os containers
Nunca usar o POD como Deployment. O pod sozinho nao garante estabilidade e nem resiliencia

kubectl api-resources

kubectl apply -f meuprimeiropod.yaml 

kubectl get pods

kubectl describe pod meuprimeiropod

kubectl port-forward pod/meuprimeiropod 8080:80

kubectl delete pod meuprimeiropod

# Labels e Selectors
kubectl get pods -l versao=verde

kubectl get pods -l app=nginx

#ReplicaSet

kubectl apply -f meuprimeiroreplicaset.yaml

kubectl get pods

kubectl port-forward pods/meuprimeiroreplicaset-nlld9 8080:80

kubectl get replicasets

kubectl describe replicasets.apps meuprimeiroreplicaset
kubectl describe replicasets meuprimeiroreplicaset

kubectl scale replicaset meuprimeiroreplicaset --replicas=3

#Deployment
Responvasel por gerenciar o replicaset
	Deployment
		replicasets
			Pods

kubectl apply -f meuprimeirodeployment.yaml

kubectl get pods 

kubectl get replicasets

kubectl get deployments


kubectl describe deployments meuprimeirodeployment 

kubectl scale deployment meuprimeirodeployment --replicas=4

kubectl get pod -o wide

kubectl get replicasets

kubectl rollout history deployment meuprimeirodeployment

kubectl rollout undo deployment meuprimeirodeployment

kubectl set image deployment meuprimeirodeployment meucontainer=kubedevio/nginx-color:green

kubectl delete deployments meuprimeirodeployment

#ClusterIP
Server para gerar conexao dentro do cluster kubernetes. Nada externo
Para testar criar um deployment

kubectl apply -f deployment.yaml

kubectl get pods -o wide

kubectl run -i --tty --image kubedevio/ubuntu-curl ping-test --restart=Never --rm -- /bin/bash
curl http://10.244.0.127:8080/temperatura/fahrenheitparacelsius/100

kubectl apply -f clusterip.yaml

kubectl get services

kubectl scale deployment api --replicas=1

kubectl run -i --tty --image kubedevio/ubuntu-curl ping-test --restart=Never --rm -- /bin/bash
curl http://api-service/temperatura/fahrenheitparacelsius/100

#NodePort
Server ja gera uma comunicacao externa 

kubectl apply -f deployment.yaml

kubectl apply -f nodeport.yaml

kubectl get services

docker container run --rm kubedevio/ubuntu-curl curl http://192.168.49.2:30668/temperatura/fahrenheitparacelsius/100

curl http://192.168.49.2:30668/temperatura/fahrenheitparacelsius/100

kubectl run -i --tty --image kubedevio/ubuntu-curl ping-test --restart=Never --rm -- /bin/bash

#LoadBalancer
kubectl apply -f deployment.yaml -f loadbalancer.yam

kubectl get all

#ExternalName

kubectl apply -f deployment.yaml -f externalname.yaml

#EndPoint
kubectl apply -f deployment1.yaml -f nodeport.yaml

kubectl get endpoints

#namespace

kubectl get namespaces

kubectl apply -f deploybluen.yaml -f deploygreenn.yaml  (apenas para teste vai criar no namespace default)

kubectl get deployments

kubectl get pods 

kubectl port-forward pods/deployblue-74548fd5b-pr2rv 8080:80

kubectl port-forward pods/deploygreen-7bf9b8c89-xd775 8080:80

kubectl create namespace blue

kubectl create namespace green

kubectl get namespaces 

kubectl apply -f deploybluen.yaml -n blue

kubectl get deployments (nao vai mostrar o pod assim)

kubectl get deployments -n blue

Ou pode colocar dentro do manifesrto a flag namespace: greem

kubectl apply -f deploygreenn.yaml

kubectl get deployments -n green

kubectl get deployments --all-namespace

kubectl apply -f servicen.yaml -n blue

kubectl apply -f servicen.yaml -n green

kubectl get services --all-namespaces 
NAMESPACE     NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE
blue          service-nginx-color   NodePort    10.109.187.136   <none>        80:32556/TCP             65s
default       kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP                  46h
green         service-nginx-color   NodePort    10.99.30.66      <none>        80:32393/TCP             36s
kube-system   kube-dns              ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   13d

kubectl get nodes -o wide
NAME       STATUS   ROLES           AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
minikube   Ready    control-plane   13d   v1.28.3   192.168.49.2   <none>        Ubuntu 22.04.3 LTS   6.5.0-27-generic   docker://24.0.7

http://192.168.49.2:32393/
http://192.168.49.2:32556/

kubectl run -i --tty --image kubedevio/ubuntu-curl ping-test --restart=Never --rm -- /bin/bash

kubectl get pods --all-namespaces -o wide                                                     
NAMESPACE     NAME                                  READY   STATUS    RESTARTS       AGE   IP             NODE       NOMINATED NODE   READINESS GATES
blue          deploy-nginx-color-69cc9c8988-bgwwf   1/1     Running   0              37m   10.244.0.176   minikube   <none>           <none>
default       ping-test                             1/1     Running   0              40s   10.244.0.178   minikube   <none>           <none>
green         deploy-nginx-color-6b9fc9497f-m784l   1/1     Running   0              33m   10.244.0.177   minikube   <none>           <none>
kube-system   coredns-5dd5756b68-45pd5              1/1     Running   1 (13d ago)    13d   10.244.0.3     minikube   <none>           <none>
kube-system   etcd-minikube                         1/1     Running   1 (13d ago)    13d   192.168.49.2   minikube   <none>           <none>
kube-system   kube-apiserver-minikube               1/1     Running   1 (4d8h ago)   13d   192.168.49.2   minikube   <none>           <none>
kube-system   kube-controller-manager-minikube      1/1     Running   1 (13d ago)    13d   192.168.49.2   minikube   <none>           <none>
kube-system   kube-proxy-nctzg                      1/1     Running   1 (13d ago)    13d   192.168.49.2   minikube   <none>           <none>
kube-system   kube-scheduler-minikube               1/1     Running   1 (13d ago)    13d   192.168.49.2   minikube   <none>           <none>
kube-system   storage-provisioner                   1/1     Running   3 (4d8h ago)   13d   192.168.49.2   minikube   <none>           <none>

curl http://10.244.0.176
curl http://10.244.0.177


kubectl get services --all-namespaces -o wide 
NAMESPACE     NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE     SELECTOR
blue          service-nginx-color   NodePort    10.109.187.136   <none>        80:32556/TCP             9m19s   app=nginx-color
default       kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP                  47h     <none>
green         service-nginx-color   NodePort    10.99.30.66      <none>        80:32393/TCP             8m50s   app=nginx-color
kube-system   kube-dns              ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   13d     k8s-app=kube-dns

curl http://service-nginx-color.blue.svc.cluster.local

curl http://service-nginx-color.green.svc.cluster.local

name:service-nginx-color
namespace:blue
svc.cluster.local

kubectl apply -f externalnameblue.yaml -f externalnamegreen.yaml

O que 'e separado por namespace?
kubectl api-resources
kubectl api-resources --namespaced=true
kubectl api-resources --namespaced=false
